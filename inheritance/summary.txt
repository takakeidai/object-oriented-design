




第6章：継承によって振る舞いを獲得する


継承とは、メッセージの自動委譲(デリゲート)である。
継承をすることで、共通の振る舞いを持つものの、いくつかの面で異なるという、強く関連した型(クラス)の問題を解決する。
継承のテクニックを使う上で最初に行うことは、継承を使うと有益な箇所を見つけることである。
継承によるスーパークラスとサブクラスのような、あるクラスがあるクラスの真部分集合となる関係を「is-a」の関係と言う。
ex) John is a person. 

オブジェクトはメッセージを受け取る。
コードがどれだけ複雑であろうとも、メッセージを受け取るオブジェクトは最終的には2つの方法のうちどちらかで処理する。
直接自分が応答するか、応答してもらうべくさらに他のオブジェクトにメッセージを渡すかのどちらか。
継承によって2つのオブジェクトに関係を定義できる。
その関係によって、1つ目のオブジェクトがメッセージを受け取り、それが理解できないものだった場合、自動的に転送・委譲を行い、
そのメッセージを2つ目のオブジェクトに渡せるようになる。
一般の継承という単語から想起されるような系図と、クラスの継承とは少々イメージが異なる。

継承
・モデル化しているオブジェクトが「一般：特殊」、「汎化：特化」の関係をしっかり持っていること
・正しいコーディングテクニックを使っていること(クラスの具象化ではなく、抽象化を行う)

抽象クラスはサブクラスのために存在し、抽象クラスのインスタンスが生成されることはない。
また、抽象クラスは少なくとも2つのサブクラスを持つ。
1つしかサブクラスがない場合は、抽象クラスの抽象度を落として1つの具象クラスを作る。

新たな継承の階層構造へとリファクタリングする際には、
クラスの抽象的な振る舞いを抽象クラスとして、つまり新しく抽象的なクラスを作って、その振る舞いの一部にして、継承構造を作るべきであって、
クラスの具体的な振る舞いをサブクラスとして、つまり新しくサブクラスを作って、その振る舞いの一部として、クラスの継承構造を作るべきではない。

継承における注意点１
抽象スーパークラス内のコードを使わないサブクラスがあってはいけない。
全てのサブクラスでは使われないけど一部のサブクラスでは使うようなコードはスーパークラスにおくべきではない。
サブクラスはスーパークラスのインターフェイスに含まれるどのメッセージが来ても応えられるようにしなければいけない。
その点で、サブクラスはスーパークラスと置換できることが約束されなければならない。
またこの点で、サブクラスは漏れなく全てスーパークラスに含まれるため、サブクラスはスーパークラスの真部分集合と言える。
この置換可能性をリスコフの置換原則(LSP)という。
これは、「システムが正常であるためには、派生型は上位型と置換可能でなければならない」という原則。

継承における注意点２
スーパークラスとサブクラスからなる階層構造について、階層構造は常に浅く保つべきである。
階層構造が深く広くなると、階層構造の理解は困難になり、メンテナンスにもコストがかかるため避けなければならない。
オブジェクトは自身より上に位置するオブジェクト全てに依存するので、階層構造が深く広くなればなるほどそれだけ依存が増す。
しかもその依存先のオブジェクトにいつか変更が加えられるかもしれない。そうすれば最下層のクラスにも影響を及ぼし、発見しにくいバグの原因になる。