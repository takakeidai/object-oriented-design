




第8章：コンポジションでオブジェクトを組み合わせる


コンポジションとは、組み合わされた全体が、単なる部品の集合以上になるように、
個別の部品を複雑な全体へと組み合わせる行為のことである。

コンポジションにおいては、より大きいオブジェクトとその部品が、「has-a」の関係よって繋がれる。
逆に継承は「is-a」の関係と言える。
短所と長所を知って、コンポジションのテクニックを用いるか、継承を用いるかを決めるべきである。

継承の場合は、
Bicycleクラスがあり、Bicycleクラスは自転車一般のプロパティーとメソッドを持っていた。
Bicycleクラスを継承するRoadBikeクラスとMountainBikeクラスが存在し、各々が自分自身固有の性質に関するプロパティーとメソッドを持っていた。
Bicycleクラス、RoadBike(Bicycle)クラス、MountainBike(Bicycle)クラスの3つが存在し、それぞれの抽象度でプロパティーやメソッドを保持していた。
Bicycleクラスは、そのsize、chain、tire_sizeを内包し、
RoadBikeクラスは、tape_colorを内包し、
MountainBikeクラスは、front_shock、rear_shockを内包していた。

コンポジションの場合、
RoadBikeクラスとMountainBikeクラスは存在しない。
コンポジションテクニックでは、部品を内包する完成品をあらかじめクラスとして用意するのではなく、部品から完成品を構成するテクニックである。
端的に言えば、RoadBikeクラスとMountainBikeクラスを用意するのではなく、
Partクラスを用意し、そのPart(部品)クラスから、
tape_color,front_shock、rear_shockなど今までRoadBikeやMountainBikeを構成していた部品のインスタンスを生成する。
そして、それらのインスタンスの集合体として完成品であるRoadBikeやMountainBikeを作ろうという試みである。
コンポジションにおいて必要となるクラスは、Bicycleクラスに加えて、様々な個々の部品(Part)を扱うPartクラスと、
PartクラスをまとめるParts(部品の総称)クラスである。
Partクラスから、tape_color,front_shock、rear_shockインスタンスを生成し、
必要な部品をPartsクラスに渡して、BicycleクラスでRoadBikeやMountainBikeなどのオブジェクトを作っていく。
例えば、MountainBikeならば、front_shockとrear_shockの部品が必要だから、
front_shock = Part() <= front_shock部品のインスタンス生成
rear_shock = Part() <= rear_shock部品のインスタンス生成
parts = Parts(front_shock, rear_shock) <= それぞれの部品を組み立てる
mountain_bike = Bicycle(parts) <= 完成した部品群をBicycleクラスに渡せばおのずとmountain_bikeが完成する
コンポジションの場合には、Bicycleクラスはpartsオブジェクトを明確に知っていなければならない。ここで依存が発生する。


委譲(デリゲート)とは、メッセージを受け取り、それをどこかほかのオブジェクトに転送すること。
この委譲が依存を作り出す。
メッセージを受け取るオブジェクトは必ず送り先のオブジェクトを知っていなければならない。
メッセージを委譲する側とされる側が、委譲する側のオブジェクト内部で交流を行う。
コンポジションは、委譲が主題の技術である。
この委譲が、コンポジションにコストを発生させ、継承とコンポジションのどちらが適切か判断する必要性を生む。

[継承とコンポジションの利点と欠点]
継承は、オブジェクト関係に階層構造を用いることで委譲のコストを削減する。
さらに継承の利点として、振る舞いの大きな変更をコードの小さな変更で成し遂げられる。
スーパークラスへの小さなコードの修正で、サブクラスの振る舞い全てに影響を与えられる。
大規模開発や色々なプログラマーが関わるコーディングにおいてはあまり適さない。

オブジェクトがスーパークラス、サブクラスと階層的になることで、
オブジェクトは他のオブジェクトを知る必要がなくなり、委譲の必要もなくなる。
反対に、コンポジションでは、オブジェクトは階層構造を持たず個々のオブジェクトが独立している代わりに、
オブジェクト同士が、明示的に相手のことを知っていなければならなくなる。

一般的なルールとして、まずコンポジションで解決できる場合はコンポジションで解決するべきである。
コンポジションが発生させるクラス間の依存関係は、継承のそれより遥かに小さいからだ。
オブジェクトがパーツを持てば持つほど、コンポジションでモデル化されるべきである。

今までの学習で見た「継承」、「ダックタイプ」、「コンポジション」をまとめる。
あるクラスがあるクラスの真部分集合となる「is-a」の関係なら、継承を、
いくつものさまざまなオブジェクトが共通のロールを担うことが求められる「behaves-like-a」の関係なら、ダックタイプを、
オブジェクトがいくつものパーツを含む「has-a」の関係なら、コンポジションを使う。
