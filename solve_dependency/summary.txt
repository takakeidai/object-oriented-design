




第3章：依存関係を管理する

オブジェクト指向プログラムにおいて、オブジェクトは他のオブジェクトを知り、メッセージをやりとりすることで効率よくプログラムが動く。
しかし、オブジェクトが他のオブジェクトを知りメッセージを送り合うことでオブジェクト間に依存関係ができる。
オブジェクト指向プログラムでは、一定の依存関係がクラス間に生まれるのは不可避であるが、この依存関係を正しく最小化することが大切である。

ここでメッセージとは、あるオブジェクトへの参照のことである。
通常広い意味でのメッセージとは自分自身や他のオブジェクトのメソッドやプロパティへの参照のことを意味する。
今後出てくる、外部のメッセージとは、自身のオブジェクトではなく外で定義されているオブジェクトへの参照を意味する。

あるオブジェクトが以下の4つを満たしている場合、そのオブジェクトは他のオブジェクトと依存関係にあることが考えられる。
オブジェクト内で、
・他のクラスが使われている
・他のクラスのメソッドが使われている
・他のクラスのメソッドが、定まった引数を必要としている
・他のクラスのメソッドが、定まった順番で引数を必要としている

Gearクラスが、Wheelクラスに対して上の4つを満たしているとき、
Wheelクラスを変更してしまうと（クラスの名前の変更や、メソッドの変更、メソッドの引数の変更、その順番の変更）
Gearクラスも変更しなければいけないことになる。

以下できる限り依存関係から影響を受けないインターフェイス作成の技法

・外部のクラスへの参照を分離・隔離する方法があげられる。
依存オブジェクトインジェクションによって、外部のクラスへの参照を分離する。
依存オブジェクトインジェクションとは、クラス内部で別のクラスのインスタンスを生成するのではなくて、
(引数など）外からインスタンスをクラスに渡して、そのインスタンスのメソッドを内部で使う方法である。
Gearクラス内で、Wheelクラスのインスタンスを生成するのではなく、WheelクラスのインスタンスwheelをGearクラスに渡す。

・外部へのメッセージを分離するとき、外部へのメッセージを別のメソッドでカプセル化するとうまく外部へのメッセージを分離できる。
特に外部へのメッセージがクラスに埋め込まれていて、かつそのメッセージが変わる可能性が高いときに有効。

・引数の順番を、可変長引数**kwargsを使って解決する。

・インターフェイスを変えることができないクラスを扱う場合は、新たなラッパークラスを定義して柔軟にする。
このような他のオブジェクトを作成することが目的となるオブジェクトのことをファクトリーと言ったりする。

・クラス間の依存関係を考えるとき、そのクラスよりも変更されにくいクラスに依存させることを常に考える。
アプリケーション内のクラスは、変更されやすさで順位付けされる。

・以下の３つの事実を意識してコーディングする。
1.あるクラスは別のクラスよりも変更されやすい
2.具象クラスは、抽象クラスよりも変更されやすい
3.多くのクラスから依存されているクラスを変更すると、影響が大きい

この中でもとくに、「クラスの変更されやすさ」と「(そのクラスの)依存クラスの数」の2つの軸で異なるクラスを比べて設計する。
そして常に、より変更されにくいと考えられるクラスにクラスを依存させることを考える。

