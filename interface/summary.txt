




第4章：柔軟なインターフェイスをつくる


[メッセージの定義：メソッドとメッセージの違いの明確化]
Personクラスは、say_helloメソッドを持つと仮定する。
この時、person = Person()でインスタンス変数personを生成する。
personインスタンスは、say_helloメソッドを持っているから、
person.say_hello()
と実行できる。

メッセージとは、オブジェクトに対してドット演算子でメソッドを呼び出すための文法的形式[.method(）]のこと、
またはそのような文法的形式を用いてオブジェクトのメソッドを呼び出す行為そのものである。
あるオブジェクトのメソッドを呼び出すことを、オブジェクトにメッセージを送るという。
それが自分自身に作用するとき、自分自身へのメッセージ、あるいは内部メッセージといい、
外にある自分以外のオブジェクトに対する時、外部メッセージという。

一方メソッドとはクラス内で定義された、オブジェクトが持つ手続き群(関数群)のこと。
person.say_hello()において、メソッドという用語を使って表すか、メッセージという用語を使って表すか
これはまさに、personオブジェクトのsay_helloメソッドを呼び出していると見るか、
オブジェクトpersonに、.say_hello()というメッセージを送っていると見るか、という視点の違いである。

最後に、「objectAがメッセージを、objectBに送った」という文の意味を考えたい。
メッセージが送られたのは(＝メッセージを受け取ったのは）objectBだから、間違いなくメソッドを実行するのはobjectBである。
objectB.method()
問題はこの.method()というメッセージをobjectAがどのように送るかということ。
これは、objectA内で、objectBに.method()というメッセージを送るメソッドが定義されているということだ。
つまり、
class Object_A():
    ...

    def send_message_to_B(self):
        ...
        objectB.method()
        ...

objectA.send_message_to_B()は、つまり、objectB.method()の実行を意味していて、
これはまさに「objectAがメッセージを、objectBに送った」ことになる。

設計では、オブジェクトが何を知っているか(オブジェクトの責任)や、誰を知っているか(オブジェクトの依存関係)だけではなく、
オブジェクトが互いにどのように会話するかを考慮しなければいけない。

他のオブジェクトに利用されるメソッド＝パブリックインターフェイス
・クラスの主要な責任を明らかにする
・外部から実行されることが想定される
・気まぐれに変更されない
・他者がそこに依存しても安全
・テストで完全に文章化されている

内部実装の詳細に関わるメソッド＝プライベートメソッド
・実装の詳細に関わる
・他のオブジェクトから送られてくることは想定されない
・どんな理由でも変更され得る
・他者がそこに依存するのは危険
・テストでは言及さえされないこともある

アプリケーションに必要なメッセージを決めて、そのメッセージに呼応するクラスを定義していく。
そうすると不必要で互いに役割が被っていて非効率なクラスを生み出すことがなくなる。
オブジェクトが存在してメッセージを送るのではなくて、メッセージを送るためにオブジェクトが存在する。
シーケンス図を書きながら、必要なメッセージの存在をまず認識して、そのメッセージを行う適切なオブジェクトを生み出す。

クラスの設計において他者と会話する時、
「私は自分が何を望んでいるかを知っている。そしてあなたがそれを叶えてくれる（あなたがあなたの担当部分をやってくれると信じている）」という状態がベストで、
また、「私は、あなたが私の望みを叶えるために、何をするかを知らないし、ましてやどのようにそれを実行するかなど知り得ない」という状況がベストである。

私がお腹を空かせたら、私の願いはお腹を満たすことであり、その願いをあなたが叶えてくれることを知っているけれども、
その願いをあなたがどのように叶えてくれるかは知らない。
料理をしてくれるのかもしれないし、何かご飯を買ってきてくれるのかもしれない、または電話で出前の注文をしてくれるのかもしれない。
ましてや、願いの叶え方の具体的な方法を知るはずもない。
料理をするならば具体的な料理方法を知らないし、ご飯を買ってきてくれるとしても具体的に何を着て何を履いてどこへ行きどう買うかを知らないし、
出前をするにしても電話の掛け方を知っているはずがなければ電話番号の調べ方も私は知らない。

クラスのメソッドはパブリックとプライベート(_をつけて)でしっかりと分ける。
他のクラスと協力する時は、それらのパブリックインターフェイスのみを使ってベストを尽くす。