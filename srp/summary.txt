




第2章：単一責任のクラスを設計する

単一責任の原理：Single Responsibility Principle

1: クラスは常に単一の責任を負っている
そのクラスが果たすべき1つの役割に集中した設計がされているべきである。

2: DRY：Don't Repeat Yourselfなコードを書く
変数は一箇所にまとめておき、その一箇所を変更すればよい設計にしておく。

3: データ構造を隠蔽する
リストや配列、辞書型、さまざまな形式でデータが格納され、
それぞれのデータ構造に固有な方法でデータにアクセスしなければならない部分を、別のメソッドやクラスを使って隠蔽する。
それにより、将来発生するデータ構造の変更に柔軟に対応できる。

4: メソッドも単一責任にする
1つのメソッド内でいくつも関係ない変数を定義しない。そのメソッドが本質的に求める変数・値以外は別のメソッドにやらせるか、別の関数を用意する。
直径を計算するメソッドにおいて半径の値が必要ならば別のメソッドにやらせる。

最後に、目の前のクラスが単一責任の原則に則っているかを確認する便利な2つの方法を紹介する。
1つは、クラスのプロパティーやメソッドについての質問を、そのクラスにすることが妥当かどうか判断する。
「Gearさん、あなたの比を教えてください」
「Gearさん、あなたのインチを教えてください」
「Gearさん、あなたのタイヤを教えてください」
仮に「Gearさん」という、問いに応えられる主体がいたときGearにタイヤやそのサイズの質問をするのは的外れだということが容易にわかる。
もしもGearクラスにタイヤに関するプロパティやメソッドが含まれていたら、そのクラスは適切に単一責任の原則を果たしていないことを意味する。
タイヤサイズなどはタイヤクラスを作成しそっちに任せるべきである。

もう1つの方法は、1文でクラスを説明してみることである。
「それと」や「または」がクラスの説明に含まれるなら、高い確率でそのクラスは単一責任の原則を満たしていない。
