




第5章：ダックタイピングでコストを削減する

ダックタイピングとは、受け取ったオブジェクトがどのようなものでも、ある決まったメッセージを信頼して送るテクニック。
ダックタイプは、異なる様々なオブジェクトが共通のロールを担うことが求められる「behaves-like-a」の関係に有効である。
オブジェクトにそのメッセージを送れることは知っているが、
内部的にどのような実装がされるのか、そのメッセージを送るとどのような行動をとるのかはこちら側は知らない。
異なるオブジェクトが渡されることがあるが、渡せされるオブジェクトはどのようなものでも、こちら側から決まったメッセージを送れる。

ダックタイピングは「あるオブジェクトが正しいインタフェースを持っているかどうかを決定するために、
オブジェクトの型を見ることはしないプログラミングスタイルである」と説明される。
代わりに、オブジェクトが持つメソッドや属性（フィールドまたはプロパティ）が単純に呼ばれたり使われたりする。
特定の型よりもインタフェースを重視することで、うまく設計されたコードは、ポリモーフィックな代入の許可による柔軟性を向上する。
ただしタックタイピングは動的型付け言語のみに使える手法。

実装は全く異なるが、同じ名前のメソッドを持つ2つのオブジェクトをそれぞれ引数として受け取り、
そのオブジェクトにメッセージを送れば、どちらも反応し、かつ異なる行動をとる。
これは、異なるオブジェクトが同じメッセージに呼応することができることを意味する。

ここでポリモーフィズムという概念が現れる。
ポリモーフィズムとは、多岐にわたるオブジェクトが、同じメッセージに応答できるようにする設計手法、あるいは同じメッセージに応答できる状態を指す概念である。
具体的にポリモーフィズムを実現する方法としては、ダックタイピングや、継承、モジュールによる振る舞いの共有などがある。
